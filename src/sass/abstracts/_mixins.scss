$breakpoints: (
    "phone":        (max-width: 400px),
    "phone-wide":   (max-width: 480px),
    "phablet":      (max-width: 560px),
    "tablet-small": (max-width: 640px),
    "tablet":       (max-width: 768px),
    "tablet-wide":  (max-width: 1024px),
    "desktop":      (max-width: 1248px),
    "desktop-wide": (max-width: 1440px)
);

/// Responsive breakpoint manager
/// @access public
/// @param {String} $breakpoint - Breakpoint
/// @requires $breakpoints
///
/// @example scss - Usage
/// .foo {
///   color: red;
///   @include respond-to('small') {
///     color: blue;
///   }
/// }
///
@mixin respond-to($breakpoint) {
    $raw-query: map-get($breakpoints, $breakpoint);
  
    @if $raw-query {
      $query: if(
        type-of($raw-query) == 'string',
        unquote($raw-query),
        inspect($raw-query)
      );
  
      @media #{$query} {
        @content;
      }
    } @else {
      @error 'No value found for `#{$breakpoint}`. '
           + 'Please make sure it is defined in `$breakpoints` map.';
    }
  }

/// Mixin helper to output vendor prefixes
/// @access public
/// @author HugoGiraudel
/// @param {String} $property - Unprefixed CSS property
/// @param {*} $value - Raw CSS value
/// @param {List} $prefixes - List of prefixes to output
///
/// @example scss - Usage
/// .foo {
///   @include prefix(transform, rotate(90deg), ('webkit', 'ms'));
/// }
///
@mixin prefix($property, $value, $prefixes: ()) {
    @each $prefix in $prefixes {
      -#{$prefix}-#{$property}: $value;
    }
  
    #{$property}: $value;
  }

@mixin warning-theme($theme) {

    $primary: map-get($theme, primary);
    $accent: map-get($theme, accent);
    $warn: map-get($theme, warn);

    $background: map-get($theme, background);
    $foreground: map-get($theme, foreground);

    .warning {
        
      border-radius: 5px;
      padding: 10px 20px;
      color: mat-color($primary, 50, 1) !important;
      background: mat-color($primary, default-contrast, 1);
    
    }
  
  }